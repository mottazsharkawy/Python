# Use of Python to explore data related to bike share systems for three major cities in the United Statesâ€”Chicago, New York City, and Washington. 
# Import the data and answer interesting questions about it by computing descriptive statistics. 
# Provide a script that takes in raw input to create an interactive experience in the terminal to present these statistics.
# Data provided by https://motivateco.com/, a bike share system provider for many major cities in the United States.

import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city = input('Enter city [choices: Chicago, New York City, Washington]: ').lower()
    while city not in CITY_DATA.keys():
        city=input('Wrong choice. Please enter a city from Chicago, New York City, Washington: ').lower()
    # TO DO: get user input for month (all, january, february, ... , june)
    months_choices=['all', 'january', 'february', 'march', 'april', 'may', 'june']
    month=input('Enter a month from January to June or All for all the months: ').lower()
    while month not in months_choices:
        month=input('Wrong choice. Enter a month from January to June or All for all the months: ').lower()
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    days_choices=['all', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    day=input('Enter a day from Monday to Sunday or All for all the days: ').lower()
    while day not in days_choices:
        day=input('Wrong choice. Enter a day from Monday to Sunday or All for all the days: ').lower()

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    # load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city]) 

    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time']) 
    
    # extract hour from the Start Time column to create an hour column
    df['hour'] = df['Start Time'].dt.hour

    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.day_name()


    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month)+1
    
        # filter by month to create the new dataframe
        df = df[df['month'] == month]

    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]


    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    most_common_month = df['month'].mode()[0]
    print('Most common month: ', most_common_month)

    # TO DO: display the most common day of week
    most_common_day = df['day_of_week'].mode()[0]
    print('Most common day of the week: ', most_common_day)

    # TO DO: display the most common start hour
    most_common_hour = df['hour'].mode()[0]
    print('Most common hour: ', most_common_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    most_common_start_station = df['Start Station'].mode()[0]
    print('Most commonly used start station: ', most_common_start_station)

    # TO DO: display most commonly used end station
    most_common_end_station = df['End Station'].mode()[0]
    print('Most commonly used end station: ', most_common_end_station)

    # TO DO: display most frequent combination of start station and end station trip
    most_frequent_combination=('Start station: ' + df['Start Station'] + ' ------ End station: ' + df['End Station']).mode()[0]
    print('Most frequent comination of stations: ', most_frequent_combination)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    print('The total travel time is ', df['Trip Duration'].sum(), ' seconds')

    # TO DO: display mean travel time
    print('The mean travel time is ', df['Trip Duration'].mean(), ' seconds')

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df, city):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    
    # TO DO: Display counts of user types
    user_types = df['User Type'].value_counts()
    print(pd.DataFrame(user_types))
    
    if city != 'washington':
        # TO DO: Display counts of gender
        gender = df['Gender'].value_counts()
        print(pd.DataFrame(gender))
    
        # TO DO: Display earliest, most recent, and most common year of birth
        print('Earliest birth year is ', int(df['Birth Year'].min()))
        print('Most recent birth year is ', int(df['Birth Year'].max()))
        print('Most common birth year is ', int(df['Birth Year'].mode()[0]))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

    #Ask user if they want to display raw data
def display_data(df):
    view_data = input('\nWould you like to view 5 rows of data? Enter       yes or no\n').lower()
    start_loc = 0
    while (view_data!='no'):
        if view_data=='yes':
            print(df.iloc[start_loc:start_loc+5])
            start_loc += 5
            view_data = input("Do you wish to continue?: ").lower()
        else:
            view_data = input('\n Wrong Choice! Would you like to view 5 rows of data? Enter yes or no\n').lower()

def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        # Ask user if they want times stats 
        time_stats_display = input('\nWould you like to display time stats? Enter yes or no or exit to stop the program.\n')
        while time_stats_display.lower() not in ['yes', 'no', 'exit']:
            time_stats_display = input('\nWrong Choice! Would you like to display time stats? Enter yes or no or exit to stop the program.\n')
        if time_stats_display.lower() == 'yes':
            time_stats(df)
        elif time_stats_display.lower()=='exit':
            break
            
        # Ask user if they want station stats    
        station_stats_display = input('\nWould you like to display station stats? Enter yes or no or exit to stop the program.\n')
        while station_stats_display.lower() not in ['yes', 'no', 'exit']:
            station_stats_display = input('\nWrong Choice! Would you like to display station stats? Enter yes or no or exit to stop the program.\n')
        if station_stats_display.lower() == 'yes':
            station_stats(df)
        elif station_stats_display.lower()=='exit':
            break
            
        # Ask user if they want trip duration stats
        trip_duration_stats_display = input('\nWould you like to display trip duration stats? Enter yes or no or exit to stop the program.\n')
        while trip_duration_stats_display.lower() not in ['yes', 'no',  'exit']:
            trip_duration_stats_display = input('\nWrong Choice! Would you like to display trip duration stats? Enter yes or no or exit to stop the program.\n')
        if trip_duration_stats_display.lower() == 'yes':
            trip_duration_stats(df)
        elif trip_duration_stats_display.lower()=='exit':
            break
            
        # Ask user if they want user stats
        user_stats_display = input('\nWould you like to display user stats? Enter yes or no or exit to stop the program.\n')
        while user_stats_display.lower() not in ['yes', 'no', 'exit']:
            user_stats_display = input('\nWrong Choice! Would you like to display user stats? Enter yes or no or exit to stop the program.\n')
        if user_stats_display.lower() == 'yes':
            user_stats(df, city)
        elif user_stats_display.lower()=='exit':
            break 
            
        # Ask user if they want to display raw data
        display_data(df)
            
        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break
        

if __name__ == "__main__":
	main()
